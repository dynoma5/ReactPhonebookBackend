{"version":3,"sources":["PhoneService.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","dataUrl","concat","remove","delete","updatedObject","url","update","put","Notification","style","message","Filter","string","method","value","onChange","PersonForm","submitMethod","nameInput","nameOnChange","numberInput","numberOnChange","onSubmit","type","Persons","filterString","arrayList","deleteMethod","length","map","person","key","name","number","JSON","stringify","onClick","filter","toLowerCase","includes","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","PhoneService","result","color","background","fontStyle","borderStyle","borderRadius","padding","marginBottom","event","target","preventDefault","personObject","undefined","find","x","setTimeout","catch","error","window","confirm","console","log","parse","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bdcbc305.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst baseUrl = '/api/persons/';\r\n\r\nconst getAll = () =>{\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n}\r\n\r\nconst create = (newObject) =>{\r\n    const post = axios.post(baseUrl, newObject)\r\n    return post.then(response => {\r\n        return response.data\r\n    })\r\n}\r\n\r\nconst remove = (id) =>{\r\n    const dataUrl = baseUrl.concat(id)\r\n    const remove = axios.delete(dataUrl)\r\n    return remove.then(response =>{\r\n        return response\r\n    })\r\n}\r\nconst update = (id, updatedObject) => {\r\n    const url = baseUrl.concat(id)\r\n    const update = axios.put(url, updatedObject)\r\n    return update.then(response => {\r\n        return response\r\n    })\r\n    \r\n}\r\nexport default {\r\n    getAll,\r\n    create,\r\n    remove,\r\n    update\r\n}","import React, { useState, useEffect } from 'react';\r\nimport PhoneService from './PhoneService';\r\n\r\nconst Notification = ({ style, message }) => {\r\n\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div style={style}>{message}</div>\r\n  )\r\n}\r\n\r\nconst Filter = ({ string, method }) => {\r\n  return (\r\n    <>\r\n      filter shown with <input value={string} onChange={method} />\r\n    </>\r\n  )\r\n}\r\n\r\nconst PersonForm = ({ submitMethod, nameInput, nameOnChange, numberInput, numberOnChange }) => {\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={submitMethod}>\r\n        <div>\r\n          name: <input value={nameInput} onChange={nameOnChange} />\r\n        </div>\r\n        <div>number: <input value={numberInput} onChange={numberOnChange} /></div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nconst Persons = ({ filterString, arrayList, deleteMethod }) => {\r\n  return (\r\n    <>\r\n      {\r\n        filterString.length === 0 ?\r\n          arrayList\r\n            .map(person =>\r\n              <p key={person.id}>{person.name} {person.number} <button value={JSON.stringify(person)} type=\"button\" onClick={deleteMethod}>delete</button></p>) :\r\n          arrayList\r\n            .filter(person => person.name.toLowerCase().includes(filterString.toLowerCase()))\r\n            .map(person => <p key={person.id}>{person.name} {person.number} <button value={JSON.stringify(person)} type=\"button\" onClick={deleteMethod}>delete</button></p>)\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n\r\n\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [filter, setFilter] = useState('')\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [successMessage, setSuccessMessage] = useState(null)\r\n\r\n  const successStyle = {\r\n    color: 'green',\r\n    background: 'lightgrey',\r\n    fontStyle: 20,\r\n    borderStyle: 'solid',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10\r\n  }\r\n\r\n  const errorStyle = {\r\n    color: 'red',\r\n    background: 'lightgrey',\r\n    fontStyle: 20,\r\n    borderStyle: 'solid',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10\r\n  }\r\n\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n    const personObject = {\r\n      name: newName,\r\n      number: newNumber\r\n    }\r\n\r\n    persons.find(x => x.name === newName) === undefined ?\r\n      PhoneService.create(personObject)\r\n        .then((result) => {\r\n          setPersons(persons.concat(result))\r\n          setSuccessMessage(`Added ${newName}`)\r\n          setTimeout(() => setSuccessMessage(null), 5000)\r\n        })\r\n        .catch(error =>{\r\n          setErrorMessage(`${error.response.data.error}`);\r\n        }) :\r\n      window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`) ?\r\n        PhoneService.update(persons.find(x => x.name === newName).id, { ...persons.find(x => x.name === newName), number: newNumber })\r\n          .then(() => PhoneService.getAll().then(result => setPersons(result))) :\r\n        console.log(\"Cancelled\")\r\n\r\n    setNewName('')\r\n    setNewNumber('')\r\n  }\r\n\r\n  const handleNewName = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNewNumber = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n  const handleFilter = (event) => {\r\n    setFilter(event.target.value)\r\n  }\r\n\r\n  const deleteNumber = (event) => {\r\n    const person = JSON.parse(event.target.value)\r\n    PhoneService\r\n      .remove(person.id)\r\n      .then(() =>\r\n        PhoneService.getAll().then(result => setPersons(result)))\r\n      .catch(error => {\r\n        console.log(error)\r\n        setErrorMessage(`${person.name} has already been removed from the server.`)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    PhoneService.getAll().then(result => setPersons(result))\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={successMessage} style={successStyle}></Notification>\r\n      <Notification message={errorMessage} style={errorStyle}></Notification>\r\n      <Filter string={filter} method={handleFilter}></Filter>\r\n      <h2>Add a new</h2>\r\n      <PersonForm submitMethod={addName} nameInput={newName} nameOnChange={handleNewName} numberInput={newNumber} numberOnChange={handleNewNumber}></PersonForm>\r\n      <h2>Numbers</h2>\r\n      <Persons filterString={filter} arrayList={persons} deleteMethod={deleteNumber}></Persons>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}